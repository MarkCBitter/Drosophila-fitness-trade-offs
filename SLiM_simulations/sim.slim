initialize() {
  nAb = asInteger(nA - nAB);
  naB = asInteger(nB - nAB);


  if (nAB == 0) {
    if (nAb == 0) {
      if (naB == 0){
        // no mutations is undesirable for us, so add just one
        defineConstant("rangeA", 0);
        defineConstant("rangeB", 1);
      } else {
        // no mutations is undesirable for us, so add just one
        defineConstant("rangeA", 0);
        defineConstant("rangeB", 1:(naB));
      }
    } else {
      if (naB == 0) {
        defineConstant("rangeA", 0:(nAb-1));
        // no mutations is undesirable for us, so add just one
        defineConstant("rangeB", nAb);
      } else {
        defineConstant("rangeA", 0:(nAb-1));
        defineConstant("rangeB", nAb:(nAb+naB-1));
      }
    }
  } else {
    if (nAb == 0) {
      if (naB == 0) {
        defineConstant("rangeA", 0:(nAB-1));
        defineConstant("rangeB", 0:(nAB-1));
      } else {
        defineConstant("rangeA", 0:(nAB-1));
        defineConstant("rangeB", 0:(nAB+naB-1));
      }
    } else {
      if (naB == 0) {
        defineConstant("rangeA", 0:(nAB+nAb-1));
        defineConstant("rangeB", 0:(nAB-1));
      } else {
        defineConstant("rangeA", c(0:(nAB-1), nAB:(nAB+nAb-1)));
        // have to use min to force the values to be in-bounds in rare cases 
        // where rounding of frequencies makes it wrong by 1
        defineConstant("rangeB", c(0:(nAB-1), (nAB+nAb):min(nAB+nAb+naB-1, 2*nSeed-1)));
      }
    }
  }

  initializeMutationRate(0.0);

  // focal mutation A
  initializeMutationType("m1", h, "f", selExpA);
  // focal mutation B
  initializeMutationType("m2", h, "f", selExpB);


  initializeGenomicElementType("g1", c(m1,m2), c(0.5,0.5));
  initializeGenomicElement(g1, 0, chrom);
  initializeRecombinationRate(rbp);

  // to let us track mutations throughout, we need to do this:
  m1.convertToSubstitution = T;
  m1.mutationStackPolicy = "f";

  m2.convertToSubstitution = T;
  m2.mutationStackPolicy = "f";
}

1 early() {
  sim.addSubpop("p1", asInteger(nSeed));

  log = community.createLogFile(outfile, logInterval=1, flushInterval=101);
  log.addCycle();
  log.addPopulationSize();
  log.addCustomColumn('m_a', 'sum(p1.genomes.countOfMutationsOfType(m1));');
  log.addCustomColumn('m_b', 'sum(p1.genomes.countOfMutationsOfType(m2));');
  log.addCustomColumn('m_ab', 'sum((p1.genomes.countOfMutationsOfType(m1) == 1) & (p1.genomes.countOfMutationsOfType(m2) == 1));');
}

// introduce the focal mutation
1 late() {
  p1.genomes[rangeA].addNewDrawnMutation(m1, mutPosA);
  p1.genomes[rangeB].addNewDrawnMutation(m2, mutPosB);
}


2 early() {
  p1.setSubpopulationSize(N);
}

// expansion is over, now "truncation"
10 late() {
  sim.chromosome.setRecombinationRate(0.0);
  p1.genomes.mutationsOfType(m1).setSelectionCoeff(asFloat(selTruncA));
  p1.genomes.mutationsOfType(m2).setSelectionCoeff(asFloat(selTruncB));
}

14 late() {
  sim.simulationFinished();
}
